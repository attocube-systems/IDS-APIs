<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSharpAPIDLL</name>
    </assembly>
    <members>
        <member name="T:Attocube.API.Error.AlreadyConnectedException">
            <summary>
            Exception that is thrown if a the API_Connect method is called again, after it's been called already
            </summary>
        </member>
        <member name="M:Attocube.API.Error.AlreadyConnectedException.#ctor">
            <summary>
            Standard constructor which sets the default exception message
            </summary>
        </member>
        <member name="T:Attocube.API.Error.AttocubeAPIException">
            <summary>
            Base exception for all custom exceptions in the Attocube API library
            </summary>
        </member>
        <member name="F:Attocube.API.Error.AttocubeAPIException.ComErrorHighBytes">
            <summary>
            High bytes of the COM HResult generated by the Attocube.API system
            Error are returned as 0x8111yyyy where the "yyyy" stands for the internal error number
            </summary>
        </member>
        <member name="P:Attocube.API.Error.AttocubeAPIException.ErrorCode">
            <summary>
            Public property for the error code that this exception contains.
            This can be an internal error code (warning from 0x000 through 0x7FF, actual errors 0x800 through 0x1000)
            or it can be an interface-DLL related error as defined in the <seealso cref="T:Attocube.API.Error.ErrorCodes">ErrorCodes</seealso> class
            </summary>
        </member>
        <member name="M:Attocube.API.Error.AttocubeAPIException.#ctor">
            <summary>
            Standard, parameter-less constructor
            </summary>
        </member>
        <member name="M:Attocube.API.Error.AttocubeAPIException.#ctor(System.String)">
            <summary>
            Extended constructor which takes an exception message
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:Attocube.API.Error.AttocubeAPIException.#ctor(System.String,System.Int32)">
            <summary>
            Extended constructor which takes an error code and an exception message 
            </summary>
            <param name="message">The exception message</param>
            <param name="errorCode">The numerical error code</param>
        </member>
        <member name="M:Attocube.API.Error.AttocubeAPIException.#ctor(System.String,System.Exception)">
            <summary>
            Extended constructor which takes an exception message and a .NET inner exception
            </summary>
            <param name="message">The exception message</param>
            <param name="innerException">The "inner" .NET exception to pass on</param>
        </member>
        <member name="M:Attocube.API.Error.AttocubeAPIException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Extended constructor which takes an exception message, an error code and a .NET inner exception
            </summary>
            <param name="message">The exception message</param>
            <param name="errorCode">The numerical error code</param>
            <param name="innerException">The "inner" .NET exception to pass on</param>
        </member>
        <member name="T:Attocube.API.Error.ErrorCodes">
            <summary>
            Attocube.API defined error codes
            </summary>
        </member>
        <member name="M:Attocube.API.Error.ErrorCodes.IsWarning(System.Int32)">
            <summary>
            Determines that this error code is really "only" a warning -> do not throw an exception, just return response as is
            </summary>
            <param name="errorCode">Error code to be checked</param>
            <returns>True, if this error code is simply a warning - false if not</returns>
        </member>
        <member name="M:Attocube.API.Error.ErrorCodes.IsError(System.Int32)">
            <summary>
            Determines that this error code truly is an error that necessitates throwing an exception
            </summary>
            <param name="errorCode">Error code to be checked</param>
            <returns>True, if this error code is in fact a "real" error - false if not</returns>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.DllAlreadyConnected">
            <summary>
            0x1001 - Client has already been connected 
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.DllNotConnected">
            <summary>
            0x1002 - Client is not yet connected
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.JsonRpcCallFailed">
            <summary>
            0x1003 - Something else in the process of the JSON RPC call went wrong
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.ResponseIsNull">
            <summary>
            0x1004 - Response from JSON RPC call is NULL
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.ResponseErrorAndResultNull">
            <summary>
            0x1005 - Call returned a response with both the .Error and
            .Result property as NULL 
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.ResponseResultIsNotAnArray">
            <summary>
            0x1006 - Call returned a response, but the .Result property 
            is not a valid JSON array
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.ResponseReturnsToFewArguments">
            <summary>
            0x1007 - Call returned a response, but the .Result property 
            is not a valid JSON array
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.TooFewArgumentsToCall">
            <summary>
            0x1007 - API call needs more arguments
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.NoError">
            <summary>
            Indicator for "all OK - no error"
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.JsonRpcParseError">
            <summary>
            JSON RPC 2.0 (-32700 / 0xFFFF8044): Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.JsonRpcInvalidRequest">
            <summary>
            JSON RPC 2.0 (-32600 / 0xFFFF80A8): The JSON sent is not a valid Request object.
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.JsonRpcMethodNotFound">
            <summary>
            JSON RPC 2.0 (-32601 / 0xFFFF80A7): The method does not exist / is not available.
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.JsonRpcInvalidParams">
            <summary>
            JSON RPC 2.0 (-32602 / 0xFFFF80A6): Invalid method parameter(s).
            </summary>
        </member>
        <member name="F:Attocube.API.Error.ErrorCodes.JsonRpcInternalError">
            <summary>
            JSON RPC 2.0 (-32603 / 0xFFFF80A5): Internal JSON-RPC error.
            </summary>
        </member>
        <member name="T:Attocube.API.Error.ErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Attocube.API.Error.ErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Attocube.API.Error.ErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Attocube.API.Error.ErrorMessages.err_AlreadyConnected">
            <summary>
              Looks up a localized string similar to Attocube.API is already connected.
            </summary>
        </member>
        <member name="P:Attocube.API.Error.ErrorMessages.err_BothResultAndErrorAreNull">
            <summary>
              Looks up a localized string similar to Both &apos;.Error&apos; *and* &apos;.Result&apos; are NULL.
            </summary>
        </member>
        <member name="P:Attocube.API.Error.ErrorMessages.err_APISignalledError">
            <summary>
              Looks up a localized string similar to Embedded system signalled an error condition.
            </summary>
        </member>
        <member name="P:Attocube.API.Error.ErrorMessages.err_InvalidIpAddress">
            <summary>
              Looks up a localized string similar to IP address is invalid.
            </summary>
        </member>
        <member name="P:Attocube.API.Error.ErrorMessages.err_NotConnected">
            <summary>
              Looks up a localized string similar to Attocube.API is not yet connected.
            </summary>
        </member>
        <member name="P:Attocube.API.Error.ErrorMessages.err_ResponseIsNull">
            <summary>
              Looks up a localized string similar to The response object is NULL.
            </summary>
        </member>
        <member name="P:Attocube.API.Error.ErrorMessages.err_ResponseStreamIsNull">
            <summary>
              Looks up a localized string similar to Response Stream is NULL.
            </summary>
        </member>
        <member name="P:Attocube.API.Error.ErrorMessages.err_ResultIsNotAnArray">
            <summary>
              Looks up a localized string similar to The &apos;.Result&apos; property is not a valid JSON array.
            </summary>
        </member>
        <member name="P:Attocube.API.Error.ErrorMessages.err_TooFewArguments">
            <summary>
              Too few Arguments
            </summary>
        </member>
        <member name="T:Attocube.API.Error.NotConnectedException">
            <summary>
            Exception that is thrown if a method is being executed without the DLL being connected to a host system
            </summary>
        </member>
        <member name="M:Attocube.API.Error.NotConnectedException.#ctor">
            <summary>
            Standard constructor which sets the default exception message
            </summary>
        </member>
        <member name="T:Attocube.API.Utils.AssemblyInfoGetter">
            <summary>
            Helper class to determine the assembly metadata information
            </summary>
        </member>
        <member name="M:Attocube.API.Utils.AssemblyInfoGetter.GetAssemblyInfo">
            <summary>
                Gathers assembly info for the currently executing assembly (GetExecutingAssembly)
            </summary>
            <returns>Metadata information for the currently executing assembly</returns>       
        </member>
        <member name="M:Attocube.API.Utils.AssemblyInfoGetter.GetAssemblyInfo(System.Reflection.Assembly)">
            <summary>
                Gathers assembly info for the assembly being passed in as parameter
            </summary>
            <param name="assembly">Assembly to use for metadata discovery</param>
            <returns>Metadata information for this assembly</returns>
        </member>
        <member name="T:Attocube.API.Utils.AssemblyMetadata">
            <summary>
                Metadata class with the assembly information gathered
            </summary>
        </member>
        <member name="P:Attocube.API.Utils.AssemblyMetadata.Company">
            <summary>
                Company name
            </summary>
        </member>
        <member name="P:Attocube.API.Utils.AssemblyMetadata.Configuration">
            <summary>
                Assembly configuration
            </summary>
        </member>
        <member name="P:Attocube.API.Utils.AssemblyMetadata.Copyright">
            <summary>
                Copyright information
            </summary>
        </member>
        <member name="P:Attocube.API.Utils.AssemblyMetadata.Culture">
            <summary>
                "Culture" information
            </summary>
        </member>
        <member name="P:Attocube.API.Utils.AssemblyMetadata.Description">
            <summary>
                Description from the assembly
            </summary>
        </member>
        <member name="P:Attocube.API.Utils.AssemblyMetadata.Product">
            <summary>
                Product information from the assembly
            </summary>
        </member>
        <member name="P:Attocube.API.Utils.AssemblyMetadata.Title">
            <summary>
                Title from the assembly
            </summary>
        </member>
        <member name="P:Attocube.API.Utils.AssemblyMetadata.Trademark">
            <summary>
                Trademark info from the assembly
            </summary>
        </member>
        <member name="P:Attocube.API.Utils.AssemblyMetadata.Version2">
            <summary>
                Version number of the assembly, to level 2 (e.g. "2.21")
            </summary>
        </member>
        <member name="P:Attocube.API.Utils.AssemblyMetadata.Version3">
            <summary>
                Version number of the assembly, to level 3 (e.g. "2.21.4")
            </summary>
        </member>
        <member name="P:Attocube.API.Utils.AssemblyMetadata.Version4">
            <summary>
                Version number of the assembly, to level 4 (e.g. "2.21.4.5056")
            </summary>
        </member>
        <member name="P:Attocube.API.Utils.AssemblyMetadata.CompleteVersion">
            <summary>
                Complete version info from assembly
            </summary>
        </member>
        <member name="T:Attocube.API.Data.DiscoveryData">
            <summary>
            Class for handling the data of devices discovered using the discovery protocol
            </summary>
        </member>
        <member name="M:Attocube.API.Data.DiscoveryData.#ctor">
            <summary>
            Default, parameter-less constructor
            </summary>
        </member>
        <member name="M:Attocube.API.Data.DiscoveryData.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Extended constructor with all parameters needed to create this instance
            </summary>
            <param name="deviceName">Name setted by user setDeviceName</param>
            <param name="modelName">type of device</param>
            <param name="serialNumber">serial number</param>
            <param name="lockStatus">lock status (locked or unlocked)</param>
            <param name="ipAddress">ip address of the device</param>
            <param name="macAddress">mac address of the device</param>
        </member>
        <member name="P:Attocube.API.Data.DiscoveryData.DeviceName">
            <summary>
            Name setted by user setDeviceName
            </summary>
        </member>
        <member name="P:Attocube.API.Data.DiscoveryData.ModelName">
            <summary>
            type of device
            </summary>
        </member>
        <member name="P:Attocube.API.Data.DiscoveryData.SerialNumber">
            <summary>
            serial number
            </summary>
        </member>
        <member name="P:Attocube.API.Data.DiscoveryData.LockStatus">
            <summary>
            lock status (locked or unlocked)
            </summary>
        </member>
        <member name="P:Attocube.API.Data.DiscoveryData.IpAddress">
            <summary>
            ip address of the device
            </summary>
        </member>
        <member name="P:Attocube.API.Data.DiscoveryData.MacAddress">
            <summary>
            mac address of the device
            </summary>
        </member>
        <member name="T:Attocube.API.AttocubeAPI">
            <summary>
            AttocubeAPI implementation class
            </summary>
        </member>
        <member name="F:Attocube.API.AttocubeAPI._baseUrl">
            <summary>
            Base-URL for the web service call
            </summary>
        </member>
        <member name="P:Attocube.API.AttocubeAPI.LastRequestJson">
            <summary>
            Property that contains the last request (in JSON format) made to the JSON RPC system
            </summary>
        </member>
        <member name="P:Attocube.API.AttocubeAPI.LastResponseJson">
            <summary>
            Property that contains the last response (in JSON format) received from the JSON RPC system
            </summary>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.#ctor">
            <summary>
            Standard, parameter-less constructor - will create a standard, real JsonRpcClient when needed
            </summary>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.#ctor(Attocube.API.JsonRpc.IJsonRpcClient)">
            <summary>
            Extended constructor, which takes a pre-made IJsonRpcClient (possibly a mock for testing)
            and does not internally create a standard, real-life "JsonRpcClient" instance
            </summary>
            <param name="rpcClient">Ready-made "IJsonRpcClient" (possibly a mock for unit testing)</param>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.Connect(System.String,System.Int32)">
            <summary>
            Connect to the target with a hostname or IP address and port provided.
            If a valid port number (> 0) is supplied, the target URL is constructed like this:
                 http://$(ipAddress):$(port)/api/json
            If an invalid port number (0 or negative value) is supplied, then the string in "ipAddress" is taken
            as the literal string for the base service URL (used for e.g. testing)
            </summary>
            <param name="ipAddress">IP Address for target system</param>
            <param name="port">Port</param>
            <exception cref="T:Attocube.API.Error.AlreadyConnectedException">Thrown if the client is already connected</exception>
            <exception cref="T:System.ArgumentException">Thrown if the supplied IP address is invalid</exception>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.Disconnect">
            <summary>
            Disconnect from the target system
            </summary>
            <exception cref="T:Attocube.API.Error.NotConnectedException">Thrown if the client is not connected</exception>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.GetDllVersion">
            <summary>
            Returns the current version of the Attocube API DLL
            </summary>
            <returns>Version in the form X.Y.Z</returns>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.API_CallNoReturnValues(System.Boolean,System.Object[])">
            <summary>
            Calls the API with no return values
            </summary>
            <returns>Return value</returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
            <exception cref="T:Attocube.API.Error.NotConnectedException">Thrown if the client is not connected</exception>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.API_CallOneReturnValue``1(System.Boolean,System.Object[])">
            <summary>
            Calls the API with one return value
            </summary>
            <returns>Return value</returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
            <exception cref="T:Attocube.API.Error.NotConnectedException">Thrown if the client is not connected</exception>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.API_CallTwoReturnValues``2(System.Boolean,System.Object[])">
            <summary>
            Calls the API with two return values
            </summary>
            <returns>Return tuple of two values</returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
            <exception cref="T:Attocube.API.Error.NotConnectedException">Thrown if the client is not connected</exception>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.API_CallThreeReturnValues``3(System.Boolean,System.Object[])">
            <summary>
            Calls the API with three return values
            </summary>
            <returns>Return tuple of three values</returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
            <exception cref="T:Attocube.API.Error.NotConnectedException">Thrown if the client is not connected</exception>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.API_CallFourReturnValues``4(System.Boolean,System.Object[])">
            <summary>
            Calls the API with four return values
            </summary>
            <returns>Return tuple of four values</returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
            <exception cref="T:Attocube.API.Error.NotConnectedException">Thrown if the client is not connected</exception>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.API_CallFiveReturnValues``5(System.Boolean,System.Object[])">
            <summary>
            Calls the API with five return values
            </summary>
            <returns>Return tuple of five values</returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
            <exception cref="T:Attocube.API.Error.NotConnectedException">Thrown if the client is not connected</exception>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.API_CallSixReturnValues``6(System.Boolean,System.Object[])">
            <summary>
            Calls the API with six return values
            </summary>
            <returns>Return tuple of six values</returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
            <exception cref="T:Attocube.API.Error.NotConnectedException">Thrown if the client is not connected</exception>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.API_CallSevenReturnValues``7(System.Boolean,System.Object[])">
            <summary>
            Calls the API with seven return values
            </summary>
            <returns>Return tuple of seven values</returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
            <exception cref="T:Attocube.API.Error.NotConnectedException">Thrown if the client is not connected</exception>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.API_CallEightReturnValues``8(System.Boolean,System.Object[])">
            <summary>
            Calls the API with eight return values
            </summary>
            <returns>Return tuple of seven values, the last value is a tuple again. The tuple can't handle more columns.</returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
            <exception cref="T:Attocube.API.Error.NotConnectedException">Thrown if the client is not connected</exception>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.API_CallNineReturnValues``9(System.Boolean,System.Object[])">
            <summary>
            Calls the API with nine return values
            </summary>
            <returns>Return tuple of seven values, the last value is a tuple again. The tuple can't handle more columns.</returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
            <exception cref="T:Attocube.API.Error.NotConnectedException">Thrown if the client is not connected</exception>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.HandleResponse0(System.Boolean,Attocube.API.JsonRpc.JsonRpcResponse)">
            <summary>
            Method to handle the JSON response
            </summary>
            <typeparam name="T">Expected type of the return value </typeparam>
            <param name="response">Response of the JSON call to parse</param>
            <returns>The actual value of the call - typically an "int", "bool" or "string"</returns>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.HandleResponse1``1(System.Boolean,Attocube.API.JsonRpc.JsonRpcResponse)">
            <summary>
            Method to handle the JSON response
            </summary>
            <typeparam name="T">Expected type of the return value </typeparam>
            <param name="response">Response of the JSON call to parse</param>
            <returns>The actual value of the call - typically an "int", "bool" or "string"</returns>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.HandleResponse2``2(System.Boolean,Attocube.API.JsonRpc.JsonRpcResponse)">
            <summary>
            Method to handle the JSON response
            </summary>
            <typeparam name="T1">Expected type of the return value </typeparam>
            <typeparam name="T2">Expected type of the return value </typeparam>
            <param name="response">Response of the JSON call to parse</param>
            <returns>The actual value of the call - typically a 2-tuple of "int", "bool" or "string" values</returns>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.HandleResponse3``3(System.Boolean,Attocube.API.JsonRpc.JsonRpcResponse)">
            <summary>
            Method to handle the JSON response
            </summary>
            <typeparam name="T1">Expected type of the return value </typeparam>
            <typeparam name="T2">Expected type of the return value </typeparam>
            <typeparam name="T3">Expected type of the return value </typeparam>
            <param name="response">Response of the JSON call to parse</param>
            <returns>The actual value of the call - typically a 3-tuple of "int", "bool" or "string" values</returns>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.HandleResponse4``4(Attocube.API.JsonRpc.JsonRpcResponse,System.Boolean)">
            <summary>
            Method to handle the JSON response
            </summary>
            <typeparam name="T1">Expected type of the return value </typeparam>
            <typeparam name="T2">Expected type of the return value </typeparam>
            <typeparam name="T3">Expected type of the return value </typeparam>
            <typeparam name="T4">Expected type of the return value </typeparam>
            <param name="response">Response of the JSON call to parse</param>
            <returns>The actual value of the call - typically a 4-tuple of "int", "bool" or "string" values</returns>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.HandleResponse5``5(System.Boolean,Attocube.API.JsonRpc.JsonRpcResponse)">
            <summary>
            Method to handle the JSON response
            </summary>
            <typeparam name="T1">Expected type of the return value </typeparam>
            <typeparam name="T2">Expected type of the return value </typeparam>
            <typeparam name="T3">Expected type of the return value </typeparam>
            <typeparam name="T4">Expected type of the return value </typeparam>
            <typeparam name="T5">Expected type of the return value </typeparam>
            <param name="response">Response of the JSON call to parse</param>
            <returns>The actual value of the call - typically a 5-tuple of "int", "bool" or "string" values</returns>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.HandleResponse6``6(System.Boolean,Attocube.API.JsonRpc.JsonRpcResponse)">
            <summary>
            Method to handle the JSON response
            </summary>
            <typeparam name="T1">Expected type of the return value </typeparam>
            <typeparam name="T2">Expected type of the return value </typeparam>
            <typeparam name="T3">Expected type of the return value </typeparam>
            <typeparam name="T4">Expected type of the return value </typeparam>
            <typeparam name="T5">Expected type of the return value </typeparam>
            <typeparam name="T6">Expected type of the return value </typeparam>
            <param name="response">Response of the JSON call to parse</param>
            <returns>The actual value of the call - typically a 6-tuple of "int", "bool" or "string" values</returns>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.HandleResponse7``7(System.Boolean,Attocube.API.JsonRpc.JsonRpcResponse)">
            <summary>
            Method to handle the JSON response
            </summary>
            <typeparam name="T1">Expected type of the return value </typeparam>
            <typeparam name="T2">Expected type of the return value </typeparam>
            <typeparam name="T3">Expected type of the return value </typeparam>
            <typeparam name="T4">Expected type of the return value </typeparam>
            <typeparam name="T5">Expected type of the return value </typeparam>
            <typeparam name="T6">Expected type of the return value </typeparam>
            <typeparam name="T7">Expected type of the return value </typeparam>
            <param name="response">Response of the JSON call to parse</param>
            <returns>The actual value of the call - typically a 7-tuple of "int", "bool" or "string" values</returns>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.HandleResponse8``8(System.Boolean,Attocube.API.JsonRpc.JsonRpcResponse)">
            <summary>
            Method to handle the JSON response
            </summary>
            <typeparam name="T1">Expected type of the return value </typeparam>
            <typeparam name="T2">Expected type of the return value </typeparam>
            <typeparam name="T3">Expected type of the return value </typeparam>
            <typeparam name="T4">Expected type of the return value </typeparam>
            <typeparam name="T5">Expected type of the return value </typeparam>
            <typeparam name="T6">Expected type of the return value </typeparam>
            <typeparam name="T7">Expected type of the return value </typeparam>
            <typeparam name="T8">Expected type of the return value </typeparam>
            <param name="response">Response of the JSON call to parse</param>
            <returns>The actual value of the call - typically a 7-tuple of "int", "bool" or "string" values. The last value is a tuple of addional values. </returns>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.HandleResponse9``9(System.Boolean,Attocube.API.JsonRpc.JsonRpcResponse)">
            <summary>
            Method to handle the JSON response
            </summary>
            <typeparam name="T1">Expected type of the return value </typeparam>
            <typeparam name="T2">Expected type of the return value </typeparam>
            <typeparam name="T3">Expected type of the return value </typeparam>
            <typeparam name="T4">Expected type of the return value </typeparam>
            <typeparam name="T5">Expected type of the return value </typeparam>
            <typeparam name="T6">Expected type of the return value </typeparam>
            <typeparam name="T7">Expected type of the return value </typeparam>
            <typeparam name="T8">Expected type of the return value </typeparam>
            <typeparam name="T9">Expected type of the return value </typeparam>
            <param name="response">Response of the JSON call to parse</param>
            <returns>The actual value of the call - typically a 7-tuple of "int", "bool" or "string" values. The last value is a tuple of addional values. </returns>
        </member>
        <member name="M:Attocube.API.AttocubeAPI.Check">
            <summary>
            Discover Attocube Devices on the network
            </summary>
            <returns>Array of discovery data describing, name, type, serialNumber, ip address, mac address and lock status</returns>
        </member>
        <member name="T:Attocube.API.JsonRpc.IJsonRpcClient">
            <summary>
            Interface defining the methods that the JSON RPC client must provide
            </summary>
        </member>
        <member name="M:Attocube.API.JsonRpc.IJsonRpcClient.ExecuteRpcCall(Attocube.API.JsonRpc.JsonRpcRequest,System.Boolean)">
            <summary>
            Methode to execute a single JSON RPC call
            </summary>
            <param name="jsonRequest">All necessary request parameters</param>
            <param name="longRequest">Indicates if the timeout timer should be adjusted to wait longer than normal requests</param>
            <returns>A JsonResponse object containing the result of the operation</returns>
        </member>
        <member name="M:Attocube.API.JsonRpc.IJsonRpcClient.close">
            <summary>
            Close any remaining connection
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.IJsonRpcClient.LastRequestJson">
            <summary>
            Property that contains the last request (in JSON format) made to the JSON RPC system
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.IJsonRpcClient.LastResponseJson">
            <summary>
            Property that contains the last response (in JSON format) received from the JSON RPC system
            </summary>
        </member>
        <member name="T:Attocube.API.JsonRpc.JsonRpcClient">
            <summary>
            Concrete implementation of the IJsonRpcClient interface
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcClient.LastRequestJson">
            <summary>
            Property that contains the last request (in JSON format) made to the JSON RPC system
            </summary>
        </member>
        <member name="M:Attocube.API.JsonRpc.JsonRpcClient.close">
            <summary>
            Close aany Connection
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcClient.LastResponseJson">
            <summary>
            Property that contains the last response (in JSON format) received from the JSON RPC system
            </summary>
        </member>
        <member name="M:Attocube.API.JsonRpc.JsonRpcClient.#ctor(System.String)">
            <summary>
            Constructor for the client class
            </summary>
            <param name="baseUrl">Base URL for the JSON RPC calls</param>
        </member>
        <member name="M:Attocube.API.JsonRpc.JsonRpcClient.ExecuteRpcCall(Attocube.API.JsonRpc.JsonRpcRequest,System.Boolean)">
            <summary>
            Execute a single JSON RPC call
            </summary>
            <param name="jsonRequest">All the relevant request parameters, bundled up into a request object</param>
            <param name="longRequest">Indicates if the timeout timer should be adjusted to wait longer than normal requests</param>
            <returns>A JsonResponse object with the response (and possibly error) from the call made</returns>
        </member>
        <member name="T:Attocube.API.JsonRpc.JsonRpcClientTcp">
            <summary>
            Concrete implementation of the IJsonRpcClient interface
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcClientTcp.LastRequestJson">
            <summary>
            Property that contains the last request (in JSON format) made to the JSON RPC system
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcClientTcp.LastResponseJson">
            <summary>
            Property that contains the last response (in JSON format) received from the JSON RPC system
            </summary>
        </member>
        <member name="M:Attocube.API.JsonRpc.JsonRpcClientTcp.#ctor(System.String,System.Int32)">
            <summary>
            Constructor for the client class
            </summary>
            <param name="ip">Ip address of the target</param>
            <param name="port">Port to connect to</param>
        </member>
        <member name="M:Attocube.API.JsonRpc.JsonRpcClientTcp.close">
            <summary>
            Close the Client
            </summary>
        </member>
        <member name="M:Attocube.API.JsonRpc.JsonRpcClientTcp.ExecuteRpcCall(Attocube.API.JsonRpc.JsonRpcRequest,System.Boolean)">
            <summary>
            Execute a single JSON RPC call
            </summary>
            <param name="jsonRequest">All the relevant request parameters, bundled up into a request object</param>
            <param name="longRequest">Indicates if the timeout timer should be adjusted to wait longer than normal requests</param>
            <returns>A JsonResponse object with the response (and possibly error) from the call made</returns>
        </member>
        <member name="T:Attocube.API.JsonRpc.JsonRpcError">
            <summary>
            Possible JsonRPC error that can occur
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcError.Code">
            <summary>
            A numeric error code
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcError.Message">
            <summary>
            Error message
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcError.Data">
            <summary>
            Additional data for the error (depends on context)
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcError.InnerException">
            <summary>
            Possible inner .NET exception
            </summary>
        </member>
        <member name="T:Attocube.API.JsonRpc.JsonRpcRequest">
            <summary>
            JSON RPC request class
            </summary>
        </member>
        <member name="M:Attocube.API.JsonRpc.JsonRpcRequest.#ctor">
            <summary>
            Standard constructor - sets the "JsonRpc" property to "2.0" and initializes the "Parameters" array
            </summary>
        </member>
        <member name="M:Attocube.API.JsonRpc.JsonRpcRequest.#ctor(System.String)">
            <summary>
            Extended constructor, which also takes the JSON RPC method to call as a parameter
            </summary>
            <param name="methodName">Name of the RPC method to call</param>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcRequest.JsonRpc">
            <summary>
            "JsonRpc" marker for the requests - must be set to "2.0" for JSON RPC v2.0
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcRequest.Method">
            <summary>
            Method to call - depends on the JSON RPC host being called
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcRequest.Id">
            <summary>
            Internal "id" - should be unique for each request, will be returned in response to allow matching
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcRequest.Parameters">
            <summary>
            Array of positional parameters for the JSON RPC call
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcRequest.api">
            <summary>
            API version. Should be 2
            </summary>
        </member>
        <member name="T:Attocube.API.JsonRpc.JsonRpcResponse">
            <summary>
            JSON RPC response class
            </summary>
        </member>
        <member name="M:Attocube.API.JsonRpc.JsonRpcResponse.#ctor">
            <summary>
            Standard constructor, sets the "JsonRpc" property to "2.0" for JSON RPC v2.0
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcResponse.JsonRpc">
            <summary>
            "JsonRpc" marker for the requests - must be set to "2.0" for JSON RPC v2.0
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcResponse.Result">
            <summary>
            Arbitrary result object - could be a string, an int, an object type - depends on the call
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcResponse.Id">
            <summary>
            Internal "id" received from the request
            </summary>
        </member>
        <member name="P:Attocube.API.JsonRpc.JsonRpcResponse.Error">
            <summary>
            Possible error - if left NULL, then there's no error
            </summary>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Adjustment_GetAdjustmentEnabled">
            <summary>
            This function can be used to see if the adjustment is running
            </summary>
            <returns>
            enable: enable true = enabled; false = disabled
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Adjustment_GetContrastInPermille(System.Int32)">
            <summary>
            This function can be used to monitor the alignment contrast (peak-to-peak of the
            basic interference signal amplitude) and the basline (its offset) during alignment
            mode. It is used to monitor and optimize the optical alignment such that it allows the
            successful initialization of a measurement. To monitor the optical contrast during a
            running measurement, please use the getAxisSignalQuality function.
            
            Important: The baseline and contrast needs to be added, otherwise an overload can
            occure without being recognized. Example: baseline 150â€° and contrast 850â€°. Just
            from the contrast it looks good. Adding the baseline the overload is visible.
            </summary>
            <param name="axis">Axis to get the value from [0..2]</param>
            <returns>
            warningNo: warningNo
            contast: contast Contrast of the base band signal in â€°
            baseline: baseline Offset of the contrast measurement in â€°
            mixcontrast: mixcontrast lower contrast measurment when measuring a mix contrast (indicated by error code)
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Axis_Apply">
            <summary>
            Applies new axis settings. Necessary after JSON set commands.
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Axis_Discard">
            <summary>
            Discards new axis settings. Necessary after JSON set commands instead of apply() in case of failure.
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Axis_GetMasterAxis">
            <summary>
            Returns the master axis (for more information please refer to the IDS User Manual).
            ADD MORE INFO
            </summary>
            <returns>
            masteraxis: masteraxis Axis which is operating as masteraxis [0..2]
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Axis_GetPassMode">
            <summary>
            Reads out the current pass mode.
            </summary>
            <returns>
            mode: mode 0 = single; pass 1 = dual pass
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Axis_SetMasterAxis(System.Int32)">
            <summary>
            Sets the master axis (for more information please refer to the IDS User Manual).
            </summary>
            <param name="axis">Axis which is operating as masteraxis [0..2]</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Axis_SetPassMode(System.Int32)">
            <summary>
            Sets the desired pass mode. Effectively this mode defines, if the correction factor of two (necessary for measurements in optical dual pass configuration) is applied.
            </summary>
            <param name="mode">0 = single pass; 1 = dual pass</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Displacement_GetAbsolutePosition(System.Int32)">
            <summary>
            The absolute position information is estimated at the measurement initialization procedure.
            This initial absolute position information is not updated during system
            operation, whereas the IDS continuously measures the relative displacement from
            that point. This function outputs the sum of the static absolute position register value
            and the continuously updated displacement register value for a single axis.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            warningNo: warningNo
            position: position position of the axis in pm
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Displacement_GetAbsolutePositions">
            <summary>
            The absolute position information is estimated at the measurement initialization
            procedure. This initial absolute position information is not updated during system
            operation, whereas the IDS continuously measures the relative displacement from
            that point. This function outputs the sum of the static absolute position register value
            and the continuously updated displacement register value for all three axes.
            </summary>
            <returns>
            warningNo: warningNo
            position0: position0 position of the axis 0 in pm
            position1: position1 position of the axis 1 in pm
            position2: position2 position of the axis 2 in pm
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Displacement_GetAverageN">
            <summary>
            Reads-out the averaging (lowpass) parameter N. The averaging time is calculated by
            (2^N)*40ns, where N is the averaging value. Please refere to the manual for a table with stopband and 3dB cut-off frequency.
            </summary>
            <returns>
            averageN: averageN A value from 0 to 24
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Displacement_GetAxesDisplacement">
            <summary>
            Reads out the displacement values of all three measurement axes.
            </summary>
            <returns>
            warningNo: warningNo
            displacement0: displacement0 displacement of the axis 0 in pm
            displacement1: displacement1 displacement of the axis 1 in pm
            displacement2: displacement2 displacement of the axis 2 in pm
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Displacement_GetAxisDisplacement(System.Int32)">
            <summary>
            Reads out the displacement value of a specific measurement axis.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            warningNo: warningNo
            displacement: displacement Displacement of the axis in pm
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Displacement_GetAxisSignalQuality(System.Int32)">
            <summary>
            This function can be used to monitor the alignment contrast (peak-to-peak of the basic
            interference signal amplitude) and the basline (its offset) during a running
            measurement. Please note that the getAxisSignalQuality function output is only
            updated when a displacement is measured. This means that angular misalignments
            without displacement changes on the measurement axes cannot be detected.
            Furthermore, we recommend using the IDS high accuracy initialization to obtain
            correct values directly after measurement initialization. When using the quick
            initialization, the initial value might be falsified at first, but correct after some detected
            measurement (because it is updated with the correct value then).
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            warningNo: warningNo
            contrast: contrast Contrast of the base band signal in â€°
            baseline: baseline Offset of the contrast measurement in â€°
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Displacement_GetMeasurementEnabled">
            <summary>
            This function can be used to see if the measurement is running
            </summary>
            <returns>
            enable: enable true = enabled; false = disabled
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Displacement_GetReferencePosition(System.Int32)">
            <summary>
            The reference position information is estimated at the measurement initialization procedure or on reset.
            This initial absolute position information is not updated during system
            operation, whereas the IDS continuously measures the relative displacement from
            that point.
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            warningNo: warningNo
            position: position reference position of the axis in pm
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Displacement_GetReferencePositions">
            <summary>
            The reference position information is estimated at the measurement initialization procedure or on reset.
            This initial absolute position information is not updated during system
            operation, whereas the IDS continuously measures the relative displacement from
            that point.
            </summary>
            <returns>
            warningNo: warningNo
            position0: position0 position of the axis 0 in pm
            position1: position1 position of the axis 1 in pm
            position2: position2 position of the axis 2 in pm
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Displacement_GetSignalQuality(System.Int32)">
            <summary>
            This function can be used to monitor the alignment contrast (peak-to-peak of the basic
            interference signal amplitude) and the basline (its offset) during a running
            measurement. Please note that the getAxisSignalQuality function output is only
            updated when a displacement is measured. This means that angular misalignments
            without displacement changes on the measurement axes cannot be detected.
            Furthermore, we recommend using the IDS high accuracy initialization to obtain
            correct values directly after measurement initialization. When using the quick
            initialization, the initial value might be falsified at first, but correct after some detected
            measurement (because it is updated with the correct value then).
            </summary>
            <param name="axis">[0|1|2]</param>
            <returns>
            warningNo: warningNo
            contrast: contrast Contrast of the base band signal in â€°
            baseline: baseline Offset of the contrast measurement in â€°
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Displacement_LinProc(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Important note: This function is not actively supported anymore. With IDS firmware 1.7.0, a new set of functions corresponding to the linearization procedure was introduced and effectively outdated this function.
            
            Starts linearization procedure (additional IDS feature).
            </summary>
            <param name="axis">[0|1|2]</param>
            <param name="fringesnbr">Number of fringes to be acquired</param>
            <param name="samplesperfringe">Number of samples per fringe</param>
            <param name="set">0 = evaluate current nonlinear amplitude1 = perform linearization and upload look up table2 = Clear look up table3 = Perform only calculation of Phi file</param>
            <returns>
            lintable: lintable String, which contains all 512 phase related correction values
            nonlinearamp: nonlinearamp String which contains the residual positive and negative maximal nonlinear amplitude
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Displacement_SetAverageN(System.Int32)">
            <summary>
            Sets the averaging (lowpass) parameter N. The averaging time is calculated by
            (2^N)*40ns, where N is the averaging value. Please refere to the manual for a table with stopband and 3dB cut-off frequency.
            </summary>
            <param name="value">AverageN value from 0 to 24</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Ecu_Disable">
            <summary>
            Disables the ECU interface.
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Ecu_Enable">
            <summary>
            Enables the ECU interface.
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Ecu_GetConnected">
            <summary>
            Reads out whether the ECU interface is physically connected or not. Checking if the ECU is connected can only be done on an enabled ECU interface.
            </summary>
            <returns>
            connected: booleantrue if connected, false if not
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Ecu_GetEnabled">
            <summary>
            Reads out whether the ECU interface is enabled or not. Enabling the ECU interface is crucial for working with the ECU.
            </summary>
            <returns>
            enabled: booleantrue if enabled, false if not
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Ecu_GetHumidityInPercent">
            <summary>
            Reads out the ECU measured air humidity in percent.
            </summary>
            <returns>
            humidity: doublehumidity in %
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Ecu_GetPressureInHPa">
            <summary>
            Reads out the ECU measured air pressure in hPa.
            </summary>
            <returns>
            pressure: doublepressure in hPa
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Ecu_GetRefractiveIndex">
            <summary>
            Reads out the ECU estimated refractive index for the current
            ECU readings. To get the refractive index for other modes, please see
            getRefractiveIndexForCompensation.
            </summary>
            <returns>
            rIndex: doublerefractive index
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Ecu_GetRefractiveIndexCompensationMode(System.Int32)">
            <summary>
            Reads out the compensation mode (see below) which is currently used for the environmental compensation.
            </summary>
            <param name="axis">Axis to get the mode for.Parameter has to be -1 for the moment,individual axes will be supported in the next firmware release</param>
            <returns>
            mode: int32mode see defintion in set function
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Ecu_GetRefractiveIndexForCompensation(System.Int32)">
            <summary>
            Reads out the refractive index used according to the current environmental compensation mode for this axis.
            </summary>
            <param name="axis">Axis to get the refractive index for.Parameter has to be -1 for the moment,individual axes will be supported in the next firmware release</param>
            <returns>
            rIndex: doublerefractive index
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Ecu_GetTemperatureInDegrees">
            <summary>
            Reads out the ECU measured air temperature in degrees Celsius.
            </summary>
            <returns>
            temperature: doubletemperature in degrees C
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Ecu_SetRefractiveIndexCompensationMode(System.Int32,System.Int32)">
            <summary>
            Sets the refractive index mode.
            </summary>
            <param name="axis">Axis to set the mode for.Parameter has to be -1 for the moment,individual axes will be supported in the next firmware release</param>
            <param name="mode">mode can be 0 for direct ECU mode, 1 to take the manual values and calculate the refractive index from this or 2 to directly take the set refrative index</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.GrantAccess(System.String)">
            <summary>
            Grants access to a locked device for the requesting IP by checking against the password
            </summary>
            <param name="password">string the current password</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Lock(System.String)">
            <summary>
            This function locks the device with a password, so the calling of functions is only possible with this password. The locking IP is automatically added to the devices which can access functions
            </summary>
            <param name="password">string the password to be set</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Manual_GetHumidityInPercent(System.Int32)">
            <summary>
            Reads out the manually configured humidity (compensation mode 1).
            </summary>
            <param name="axis">Axis to get the humidity for.Parameter has to be -1 for the moment,individual axes will be supported in the next firmware release</param>
            <returns>
            humidity: doublehumidity in hPa
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Manual_GetPressureInHPa(System.Int32)">
            <summary>
            Reads out the manually configured Pressure (compensation mode 1).
            </summary>
            <param name="axis">Axis to get the pressure for.Parameter has to be -1 for the moment,individual axes will be supported in the next firmware release</param>
            <returns>
            pressure: doublepressure in hPa
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Manual_GetRefractiveIndex(System.Int32)">
            <summary>
            Reads out the manually configured value for the refractive index (compensation mode 2).
            </summary>
            <param name="axis">Axis to get the mode for.Parameter has to be -1 for the moment,individual axes will be supported in the next firmware release</param>
            <returns>
            rindex: doublerefractive index
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Manual_GetTemperatureInDegrees(System.Int32)">
            <summary>
            Reads out the manually configured Temperature (compensation mode 1).
            </summary>
            <param name="axis">Axis to set the temperature for.Parameter has to be -1 for the moment,individual axes will be supported in the next firmware release</param>
            <returns>
            temperature: doubletemperature in degree celsius
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Manual_SetHumidityInPercent(System.Int32,System.Double)">
            <summary>
            Sets the manually configured Humidity (compensation mode 1). The input range is defined to 0 to 100 % (valid range for the Ciddor Equation).
            </summary>
            <param name="axis">Axis to set the humidity for.Parameter has to be -1 for the moment,individual axes will be supported in the next firmware release</param>
            <param name="humidity">humidity in Percent</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Manual_SetPressureInHPa(System.Int32,System.Double)">
            <summary>
            Sets the manually configured Pressure (compensation mode 1). The input range is defined to 800 to 1200 hPa (valid range for the Ciddor Equation).
            </summary>
            <param name="axis">Axis to set the pressure for-Parameter has to be -1 for the moment,individual axes will be supported in the next firmware release</param>
            <param name="pressure">pressure in hPa</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Manual_SetRefractiveIndex(System.Int32,System.Double)">
            <summary>
            Sets the refractive index for the direct mode (compensation mode 2). The input range is defined to be greater than 1.
            </summary>
            <param name="axis">Axis to set the mode for.Parameter has to be -1 for the moment,individual axes will be supported in the next firmware release</param>
            <param name="rindex">refractive index</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Manual_SetTemperatureInDegrees(System.Int32,System.Double)">
            <summary>
            Sets the manually configured Temperature (compensation mode 1). The input range is defined to -40 to +100 °C (valid range for the Ciddor Equation).
            </summary>
            <param name="axis">Axis to set the temperature for.Parameter has to be -1 for the moment,individual axes will be supported in the next firmware release</param>
            <param name="temperature">temperature in degree celcius</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Nlc_ClearLut(System.Int32)">
            <summary>
            Deactivates the LUT and removes it from the device
            </summary>
            <param name="axis">Axis [0|1|2] of the IDS</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Nlc_CreateLut(System.Int32)">
            <summary>
            Creates a new LUT for the given axis.
            </summary>
            <param name="axis">Axis [0|1|2] of the IDS where the LUT should be generated</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Nlc_EstimateNonlinearities(System.Int32)">
            <summary>
            Estimates the nonlinearity error for the current device settings without changing or updating any settings.
            </summary>
            <param name="axis">Axis [0|1|2] of the IDS of which the nonlinearity error is to be estimated</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Nlc_GetDynamicNormalization(System.Int32)">
            <summary>
            Returns the normalization mode of a specific axis.
            </summary>
            <param name="axis">Axis [0|1|2] of the IDS of which the normalization mode is queried</param>
            <returns>
            mode: int32Normalization Mode0    Dynamic normalization1    Normalization frozen2    Normalization mode determined by target velocity
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Nlc_GetHistogram(System.Int32)">
            <summary>
            Returns a histogram of the measured nonlinearity errors obtained from the last call of createLut or estimateNonlinearites.
            </summary>
            <param name="axis">Axis [0|1|2] of the IDS</param>
            <returns>
            histogram: stringJson dumped histogram array
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Nlc_GetLut(System.Int32)">
            <summary>
            Returns the LUT determined by createLut (which can be applied by setLutApplied).
            </summary>
            <param name="axis">Axis [0|1|2] of the IDS</param>
            <returns>
            lut: stringJson dumped LUT array with 512 integers
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Nlc_GetLutApplied(System.Int32)">
            <summary>
            Returns whether a LUT is applied or not for a given axis.
            </summary>
            <param name="axis">Axis [0|1|2] of the IDS of which the LUT apply rule is queried</param>
            <returns>
            apply: booleanTrue, if LUT is applied on this axis else False
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Nlc_GetLutStatus(System.Int32)">
            <summary>
            Returns if a LUT is available and if warnings or errors occurred during creation.
            </summary>
            <param name="axis">Axis [0|1|2] of the IDS of which the status of the LUT should be returned</param>
            <returns>
            status: booleanTrue, if a LUT exists else False
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Nlc_GetNonlinearityEstimation">
            <summary>
            Returns the LUT created by estimateNonlinearities (read-only mode) to compensate the nonlinearity error of the device for the current device settings. If no estimation was created an array of zeros is returned.
            </summary>
            <returns>
            lut: stringJson dumped LUT array with 512 integers
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Nlc_GetVelocityThresholds">
            <summary>
            Returns the threshold velocity (in µm/s) for mode 2 of setDynamicNormalization.
            </summary>
            <returns>
            velocityOn: int32Velocity of the target in µm/s when to switch the normalization on (default: 10 µm/s)
            velocityOff: int32Velocity of the target in µm/s when to switch the normalization off (default: 5 µm/s)
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Nlc_SetDynamicNormalization(System.Int32,System.Int32)">
            <summary>
            Sets the normalization mode of a specific axis.
            </summary>
            <param name="axis">Axis [0|1|2] of the IDS of which the normalization mode should be set</param>
            <param name="mode">Normalization Mode0    Dynamic normalization (default)1    Normalization frozen (for slow target drifts)2    Automatic alternation between mode 0 and 1 depending on the target velocity</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Nlc_SetLut(System.Int32,System.String)">
            <summary>
            Uploads a LUT for a specific axis (which can be applied by setLutApplied)
            </summary>
            <param name="axis">Axis [0|1|2] of the IDS</param>
            <param name="lut">Json dumped LUT array with 512 integers</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Nlc_SetLutApplied(System.Int32,System.Boolean)">
            <summary>
            Sets the apply rule for the given axis
            </summary>
            <param name="axis">Axis [0|1|2] of the IDS of which the apply rule should be set</param>
            <param name="apply">True for applying a LUT, False for disabling a LUT</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Nlc_SetVelocityThresholds(System.Int32,System.Int32)">
            <summary>
            Sets the threshold velocity (in µm/s) for mode 2 of setDynamicNormalization. By default, the normalization in mode 2 is frozen for velocities below 5 µm/s and switched to dynamic mode for velocities above 10 µm/s.
            </summary>
            <param name="velocityOn">Velocity of the target in µm/s when to switch the normalization on (default: 10 µm/s)</param>
            <param name="velocityOff">Velocity of the target in µm/s when to switch the normalization off (default: 5 µm/s)</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Pilotlaser_Disable">
            <summary>
            Disables the pilot laser.
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Pilotlaser_Enable">
            <summary>
            Enables the pilot laser.
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Pilotlaser_GetEnabled">
            <summary>
            Reads out whether the pilot laser is enabled or not.
            </summary>
            <returns>
            enable: enable true = enabled; false = disabled
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_AafIsEnabled">
            <summary>
            Checks if the anti-aliasing filter is enabled.
            </summary>
            <returns>
            enabled: enabled false: Anti-Aliasing Filter is disabledtrue: Anti-Aliasing Filter is enabled
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_Apply">
            <summary>
            Applies new real time settings. Necessary after JSON realtime set commands.
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_DisableTestChannel">
            <summary>
            Disables the test channel.
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_Discard">
            <summary>
            Discards new real time settings. Necessary after JSON set commands in case of failure.
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_EnableTestChannel(System.Int32)">
            <summary>
            Enables the Test Channel, which can be used for estimating the maximum signal range.
            </summary>
            <param name="axis">Test Channel Master Axis</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_GetAafAttenuation">
            <summary>
            Returns the current attenuation at f_nyquist of the anti-aliasing filter.
            </summary>
            <returns>
            attenuation: attenuation [3-30] dB m f_nyquist
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_GetAafEnabled">
            <summary>
            Checks if the anti-aliasing filter is enabled.
            </summary>
            <returns>
            enabled: enabled  0 - the Anti-Aliasing Filter is disabled1 - the Anti-Aliasing Filter is enabled
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_GetAafWindow">
            <summary>
            Returns the current filter window of the anti-aliasing filter.
            </summary>
            <returns>
            window: window 0 = Rectangular,1 = Cosine,2 = Cosine^2,3 = Hamming,4 = Raised Cosine,5 = Automatic
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_GetHighPassCutOffFreq">
            <summary>
            Reads out the high pass filter number of Linear/Analog output mode.
            </summary>
            <returns>
            value: value N, Linear Analog High Pass Cut-Off freqency is 1600/2^N kHz, with N \\in [1,24]
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_GetLinearRange">
            <summary>
            Reads out the range number of Linear/Analog output mode.
            </summary>
            <returns>
            rangenumber: rangenumber N, Linear Analog Range is +-2^(N+11) pm, with N \\in [0, 34]
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_GetPeriodHsslClk">
            <summary>
            Reads out the HSSL period clock.
            </summary>
            <returns>
            period: period Period in the Range of [40ns..10200ns]
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_GetPeriodHsslGap">
            <summary>
            Reads out the HSSL period gap.
            </summary>
            <returns>
            gap: gap Number of clocks
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_GetPeriodSinCosClk">
            <summary>
            Reads out the Sine-Cosine and AquadB period clock.
            </summary>
            <returns>
            period: period 40ns to 10200ns
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_GetResolutionBissC">
            <summary>
            Reads out the BissC resolution.
            </summary>
            <returns>
            resolution: resolution 1pm to 65535pm
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_GetResolutionHsslHigh">
            <summary>
            Reads out the HSSL resolution high bit.
            </summary>
            <returns>
            resolution: resolution Resolution in the Range of [0..46]
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_GetResolutionHsslLow">
            <summary>
            Reads out the HSSL resolution low bit.#
            </summary>
            <returns>
            resolution: resolution Resolution in the range of [0..46]
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_GetResolutionSinCos">
            <summary>
            Reads out the Sine-Cosine and AquadB resolution.
            </summary>
            <returns>
            resolution: resolution 1pm to 65535pm
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_GetRtDistanceMode">
            <summary>
            Reads out the distance mode. Depending on the realtime output mode, the mode can
            be Displacement (returns 1), Absolute Distance (returns 2) or Vibrometry (returns 3).
            </summary>
            <returns>
            linearmode: linearmode 1 = Displacement (Available in HSSL mode and Linear Mode)2 = Absolute Distance (Available in HSSL mode only)3 = Vibrometry (Available in Linear mode)
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_GetRtOutMode">
            <summary>
            Reads out the current realtime output mode.
            </summary>
            <returns>
            rtOutMode: rtOutMode 0 = HSSL (TTL), 1 = HSSL (LVDS), 2 = AquadB (TTL),3 = AquadB (LVDS), 4 = SinCos (TTL Error Signal),5 = SinCos (LVDS Error Signal), 6 = Linear (TTL), 7 = Linear (LVDS),8 = BiSS-C, 9 = Deactivated
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_GetTestChannelEnabled">
            <summary>
            Checks if the test channel is enabled
            </summary>
            <returns>
            enabled: enabled true = enabled, false = disabled
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_SetAaf(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the anti-aliasing filter with assigned filter window.
            </summary>
            <param name="enabled">0 - disables the Anti-Aliasing Filter1 - enables the Anti-Aliasing Filter</param>
            <param name="attenuation">[3-30] dB m f_nyquist</param>
            <param name="window">0 = Rectangular,1 = Cosine,2 = Cosine^2,3 = Hamming,4 = Raised Cosine,5 = Automatic</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_SetHighPassCutOffFreq(System.Int32)">
            <summary>
            Sets the high pass filter number of Linear/Analog output mode.
            </summary>
            <param name="value">N, Linear Analog High Pass Cut-Off freqency is 1600/2^N kHz, with N \\in [1,24]</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_SetLinearRange(System.Int32)">
            <summary>
            Sets the range number of Linear/Analog output mode.
            </summary>
            <param name="rangenumber">N, Linear Analog Range is +-2^(N+11) pm, with N \\in [0, 34]</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_SetPeriodHsslClk(System.Int32)">
            <summary>
            Set the HSSL period clock. The value has to be a multiple of 40ns. If not, the value automatically is rounded.
            </summary>
            <param name="period">Period in the Range of [40ns..10200ns]</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_SetPeriodHsslGap(System.Int32)">
            <summary>
            Set the HSSL gap.
            </summary>
            <param name="value">Number of clocks</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_SetPeriodSinCosClk(System.Int32)">
            <summary>
            Sets the Sine-Cosine and AquadB period clock. The value has to be a multiple of 40ns. If not, the value automatically is rounded.
            </summary>
            <param name="value">period 40ns to 10200ns</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_SetResolutionBissC(System.Int32)">
            <summary>
            Sets the BissC resolution.
            </summary>
            <param name="value">resolution 1pm to 65535pm</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_SetResolutionHsslHigh(System.Int32)">
            <summary>
            Sets the HSSL resolution high bit.
            </summary>
            <param name="value">Resolution in the Range of [0..46]</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_SetResolutionHsslLow(System.Int32)">
            <summary>
            Sets the HSSL resolution low bit.
            </summary>
            <param name="value">Resolution in the Range of [0..46]</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_SetResolutionSinCos(System.Int32)">
            <summary>
            Sets the Sine-Cosine and AquadB resolution.
            </summary>
            <param name="value">resolution 1pm to 65535pm</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_SetRtDistanceMode(System.Int32)">
            <summary>
            Sets the distance mode. Depending on the configuration of the IDS the mode can be
            Displacement (returns 1), Absolute Distance (returns 2) or Vibrometry (returns 3).
            </summary>
            <param name="value">1 = Displacement (HSSL mode and Linear Mode)2 = Absolute Distance (HSSL mode only)3 = Vibrometry (Linear mode)</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Realtime_SetRtOutMode(System.Int32)">
            <summary>
            Sets the real time output mode.
            </summary>
            <param name="value">rtOutMode 0 = HSSL (TTL), 1 = HSSL (LVDS), 2 = AquadB (TTL),3 = AquadB (LVDS), 4 = SinCos (TTL Error Signal),5 = SinCos (LVDS Error Signal), 6 = Linear (TTL), 7 = Linear (LVDS),8 = BiSS-C, 9 = Deactivated</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.System_GetCurrentMode">
            <summary>
            Reads out the current IDS system state.
            </summary>
            <returns>
            mode: mode Values: "system idle", "measurement starting", "measurement running", "optics alignment starting", "optics alignment running", "test channels enabled"
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.System_GetDeviceType">
            <summary>
            Reads out the IDS device type. For differences between the device types please refer to the IDS User Manual.
            </summary>
            <returns>
            type: type Type of IDS (e.g. "IDS3010")
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.System_GetFeaturesName(System.Int32)">
            <summary>
            Converts the IDS feature number to its corresponding name.
            </summary>
            <param name="featurenumber">Number of feature</param>
            <returns>
            names: names The name of the corresponding feature
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.System_GetFpgaVersion">
            <summary>
            Reads out the IDS FPGA version.
            </summary>
            <returns>
            version: version Version in the form X.Y.Z
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.System_GetInitMode">
            <summary>
            Returns the Initialization mode.
            </summary>
            <returns>
            mode: mode 0 = High Accuracy Initialization; 1 = Quick Initialization
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.System_GetNbrFeaturesActivated">
            <summary>
            Reads out the amount of activated features activated on the IDS.
            </summary>
            <returns>
            nbr: nbr Gives the number of activated features.
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.System_GetSystemError">
            <summary>
            Reads out the system error. The function returns an integer number which represents
            the error. The number can be converted into a string using the errorNumberToString
            function, which is described below.
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.System_ResetAxes">
            <summary>
            Resets the position value of all measurement axes to zero.
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.System_ResetAxis(System.Int32)">
            <summary>
            Resets the position value of a specific measurement axis to zero.
            </summary>
            <param name="axis">[0|1|2]</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.System_ResetError(System.Boolean)">
            <summary>
            Resets a measurement error that can have occurred with the aim to continue the interrupted measurement. It is configurable if an additional renormalization process (please refer to the IDS User Manual) should be performed or not.
            
            This function can be used for two concerns:
            1.	FALSE: This function only clears displacement errors (e.g. after a beam interruption) of all three axes, while the displacement measurement is running.
            2.	TRUE: This function can be utilized to normalize the Lissajous-Figure of all three optical axes during the running displacement measurement by sweeping the laser temperature and to clear all displacement errors. This normalization process takes around 14-20 seconds. This function can be used, for example, in two main applications:
            A.	The alignment contrast decreases due to the angular change of the target and/or sensor head without any displacements (see Figure 45). Using this function, the Lissajous-Figure of each measurement axis gets normalized and high-resolution measurements are guaranteed.
            B.	After changing the optical components as, for example, the retro reflector this function can be used to normalize the Lissajous-Figure after completely losing the signal (see Figure 46).
            Attention: Depending on the Boolean input parameter performRenormalisation, it can be decided, if the renormalization process should be executed or skipped. If it is executed, the IDS system needs around 14-20 seconds to get back to the measurement mode. It is also important to comment that the recommended action after an error is to stop and to restart the displacement measurement. Moreover, losing displacement values due to an occurred error the internal absolute position can be different to the real absolute position and this can could result in dynamic movement errors or a wrong ECU compensation during long-term displacement measurements.
            </summary>
            <param name="perform">renormalization</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.System_SetInitMode(System.Int32)">
            <summary>
            Sets the mode for the initialization procedure that is performed when starting a measurement.
            </summary>
            <param name="mode">0 = High Accuracy Initialization; 1 = Quick Initialization</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.System_StartMeasurement">
            <summary>
            Starts the displacement measurement system state.
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.System_StartOpticsAlignment">
            <summary>
            Starts the optical alignment system state.
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.System_StopMeasurement">
            <summary>
            Stops the displacement measurement system state.
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.System_StopOpticsAlignment">
            <summary>
            Stops the optical alignment system state.
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Unlock(System.String)">
            <summary>
            This function unlocks the device, so it will not be necessary to execute the grantAccess function to run any function
            </summary>
            <param name="password">string the current password</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.About_GetInstalledPackages">
            <summary>
            Get list of packages installed on the device
            </summary>
            <returns>
            value_string1: string: Comma separated list of packages
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.About_GetPackageLicense(System.String)">
            <summary>
            Get the license for a specific package
            </summary>
            <param name="pckg">string: Package name</param>
            <returns>
            value_string1: string: License for this package
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Apply">
            <summary>
            Apply temporary system configuration
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.ErrorNumberToRecommendation(System.Int32,System.Int32)">
            <summary>
            Get a recommendation for the error code
            </summary>
            <param name="language">integer: Language code</param>
            <param name="errNbr">interger: Error code to translate</param>
            <returns>
            value_string1: string: Error recommendation (currently returning an int = 0 until we have recommendations)
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.ErrorNumberToString(System.Int32,System.Int32)">
            <summary>
            Get a description of an error code
            </summary>
            <param name="language">integer: Language code 0 for the error name, 1 for a more user friendly error message</param>
            <param name="errNbr">interger: Error code to translate</param>
            <returns>
            value_string1: string: Error description
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.FactoryReset">
            <summary>
            Turns on the factory reset flag. To perform the factory reset, a reboot is necessary afterwards. All settings will be set to default and the IDS will be configured as DHCP server.
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.GetDeviceName">
            <summary>
            Get the actual device name
            </summary>
            <returns>
            value_string1: string: actual device name
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.GetFirmwareVersion">
            <summary>
            Get the firmware version of the system
            </summary>
            <returns>
            value_string1: string: The firmware version
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.GetFluxCode">
            <summary>
            Get the flux code of the system
            </summary>
            <returns>
            value_string1: string: flux code
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.GetHostname">
            <summary>
            Return device hostname
            </summary>
            <returns>
            available: available
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.GetMacAddress">
            <summary>
            Get the mac address of the system
            </summary>
            <returns>
            value_string1: string: Mac address of the system
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.GetSerialNumber">
            <summary>
            Get the serial number of the system
            </summary>
            <returns>
            value_string1: string: Serial number
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_Apply">
            <summary>
            Apply temporary IP configuration and load it
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_ConfigureWifi(System.Int32,System.String,System.String)">
            <summary>
            Change the wifi configuration and applies it
            </summary>
            <param name="wifi">mode: 0: Access point, 1: Wifi client</param>
            <param name="SSID"></param>
            <param name="psk">Pre-shared key</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_Discard">
            <summary>
            Discard temporary IP configuration
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_GetDefaultGateway">
            <summary>
            Get the default gateway of the device
            </summary>
            <returns>
            Default: Default gateway
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_GetDnsResolver(System.Int32)">
            <summary>
            Get the DNS resolver
            </summary>
            <param name="priority">of DNS resolver (Usually: 0 = Default, 1 = Backup)</param>
            <returns>
            IP: IP address of DNS resolver
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_GetEnableDhcpClient">
            <summary>
            Get the state of DHCP client
            </summary>
            <returns>
            value_boolean1: boolean: true = DHCP client enable, false = DHCP client disable
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_GetEnableDhcpServer">
            <summary>
            Get the state of DHCP server
            </summary>
            <returns>
            value_boolean1: boolean: true = DHCP server enable, false = DHCP server disable
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_GetIpAddress">
            <summary>
            Get the IP address of the device
            </summary>
            <returns>
            IP: IP address as string
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_GetProxyServer">
            <summary>
            Get the proxy settings of the devide
            </summary>
            <returns>
            Proxy: Proxy Server String, empty for no proxy
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_GetRealIpAddress">
            <summary>
            Get the real IP address of the device set to the network interface (br0, eth1 or eth0)
            </summary>
            <returns>
            IP: IP address as string
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_GetSubnetMask">
            <summary>
            Get the subnet mask of the device
            </summary>
            <returns>
            Subnet: Subnet mask as string
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_GetWifiMode">
            <summary>
            Get the operation mode of the wifi adapter
            </summary>
            <returns>
            wifi: wifi mode: 0: Access point, 1: Wifi client
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_GetWifiPassphrase">
            <summary>
            Get the the passphrase of the network hosted (mode: Access point) or connected to (mode: client)
            </summary>
            <returns>
            psk: psk Pre-shared key
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_GetWifiPresent">
            <summary>
            Returns is a Wifi interface is present
            </summary>
            <returns>
            True: True, if interface is present
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_GetWifiSSID">
            <summary>
            Get the the SSID of the network hosted (mode: Access point) or connected to (mode: client)
            </summary>
            <returns>
            SSID: SSID
            size0 maximum size of previous buffer
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_SetDefaultGateway(System.String)">
            <summary>
            Set the default gateway of the device
            </summary>
            <param name="gateway">Default gateway as string</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_SetDnsResolver(System.Int32,System.String)">
            <summary>
            Set the DNS resolver
            </summary>
            <param name="priority">of DNS resolver (Usually: 0 = Default, 1 = Backup)</param>
            <param name="resolver">The resolver's IP address as string</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_SetEnableDhcpClient(System.Boolean)">
            <summary>
            Enable or disable DHCP client
            </summary>
            <param name="enable">boolean: true = enable DHCP client, false = disable DHCP client</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_SetEnableDhcpServer(System.Boolean)">
            <summary>
            Enable or disable DHCP server
            </summary>
            <param name="enable">boolean: true = enable DHCP server, false = disable DHCP server</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_SetIpAddress(System.String)">
            <summary>
            Set the IP address of the device
            </summary>
            <param name="address">IP address as string</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_SetProxyServer(System.String)">
            <summary>
            Set the proxy server of the device
            </summary>
            <param name="proxyServer">Proxy Server Setting as string</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_SetSubnetMask(System.String)">
            <summary>
            Set the subnet mask of the device
            </summary>
            <param name="netmask">Subnet mask as string</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_SetWifiMode(System.Int32)">
            <summary>
            Change the operation mode of the wifi adapter
            </summary>
            <param name="wifi">mode: 0: Access point, 1: Wifi client</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_SetWifiPassphrase(System.String)">
            <summary>
            Change the passphrase of the network hosted (mode: Access point) or connected to (mode: client)
            </summary>
            <param name="psk">Pre-shared key</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_SetWifiSSID(System.String)">
            <summary>
            Change the SSID of the network hosted (mode: Access point) or connected to (mode: client)
            </summary>
            <param name="SSID"></param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Network_Verify">
            <summary>
            Verify that temporary IP configuration is correct
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.RebootSystem">
            <summary>
            Reboot the system
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.SetDeviceName(System.String)">
            <summary>
            Set custom name for the device
            </summary>
            <param name="name">string: device name</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Update_GetLicenseUpdateProgress">
            <summary>
            Get the progress of running license update
            </summary>
            <returns>
            value_int1: int: progress in percent
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Update_GetSwUpdateProgress">
            <summary>
            Get the progress of running update
            </summary>
            <returns>
            value_int1: int: progress in percent
            </returns>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Update_LicenseUpdateBase64">
            <summary>
            Execute the license update with base64 file uploaded. After execution, a manual reboot is nevessary.
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Update_SoftwareUpdateBase64">
            <summary>
            Execute the update with base64 file uploaded. After completion, a manual reboot is necessary.
            </summary>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Update_UploadLicenseBase64(System.Int32,System.String)">
            <summary>
            Upload new license file in format base 64
            </summary>
            <param name="offset">int: offset of the data</param>
            <param name="b64Data">string: base64 data</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
        <member name="M:Attocube.IDS.AttocubeIDS.Update_UploadSoftwareImageBase64(System.Int32,System.String)">
            <summary>
            Upload new firmware image in format base 64
            </summary>
            <param name="offset">int: offset of the data</param>
            <param name="b64Data">string: base64 data</param>
            <exception cref="T:Attocube.API.Error.AttocubeAPIException">Thrown if the call failed - e.g. response is null or invalid, some error was signalled by the embedded target</exception>
        </member>
    </members>
</doc>
